{
  "name": "ypromise",
  "version": "0.2.3",
  "description": "ES6 Promise polyfill",
  "author": {
    "name": "Juan Dopazo",
    "email": "dopazo.juan@gmail.com"
  },
  "licenses": [
    {
      "type": "Yahoo BSD",
      "url": "https://github.com/yahoo/ypromise/blob/master/LICENSE.md"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:yahoo/ypromise.git"
  },
  "bugs": {
    "url": "https://github.com/yahoo/ypromise/issues"
  },
  "keywords": [
    "promise",
    "promises",
    "polyfill",
    "es6",
    "A+",
    "yahoo"
  ],
  "main": "promise.js",
  "devDependencies": {
    "promises-aplus-tests": "2.0.3",
    "requirejs": "~2.1.9",
    "mocha": "~1.7.1",
    "expect.js": "~0.2.0",
    "sinon": "~1.8.2",
    "istanbul": "~0.2.4",
    "xunit-file": "*",
    "yui-lint": "^0.1.4",
    "jshint": "^2.4.4"
  },
  "engines": {
    "node": "*"
  },
  "directories": {
    "lib": "./lib"
  },
  "scripts": {
    "pretest": "jshint --config node_modules/yui-lint/jshint.json ./promise.js",
    "test": "mocha tests/cli/amd-runner.js --globals Promise,PromisePolyfill -R dot && istanbul cover node_modules/mocha/bin/_mocha -- tests/cli/promise-tests.js -R dot",
    "lint": "jshint --config node_modules/yui-lint/jshint.json ./promise.js"
  },
  "readme": "ES6 Promise Polyfill\r\n====================\r\n\r\n[![Build Status](https://travis-ci.org/yahoo/ypromise.png)](https://travis-ci.org/yahoo/ypromise)\r\n\r\nPromises allow you to interact with a value that may or may not be available yet.\r\n\r\nGetting Started\r\n---------------\r\n\r\nThis polyfill can be loaded as:\r\n\r\n * A script that acts as a polyfill for native promises and adds a global\r\n   `Promise` constructor if the native version is not available\r\n * A Node.js module available in `npm`\r\n * An AMD module\r\n * As part of the YUI library. See its [User Guide](http://yuilibrary.com/yui/docs/promise/)\r\n\r\n### Node.js\r\n\r\n#### Installation\r\n\r\nTo use this module in Node.js, add the `ypromise` module to your dependencies\r\nin the `package.json` file of your project:\r\n\r\n```\r\n{\r\n\t\"dependencies\": {\r\n\t\t\"ypromise\": \"git@github.com:yahoo/ypromise\"\r\n\t}\r\n}\r\n```\r\n\r\nInstall it using `npm`:\r\n\r\n```\r\n$ npm install\r\n```\r\n\r\n#### Usage\r\n\r\nThe `ypromise` module exports the Promise constructor:\r\n\r\n```js\r\nvar Promise = require('ypromise');\r\n\r\nfunction asyncFunction() {\r\n\treturn new Promise(function (resolve, reject) {\r\n\t\tresolve('Hello world');\r\n\t});\r\n}\r\n```\r\n\r\nPromise API reference\r\n---------------------\r\n\r\n### Constructor\r\n\r\n```js\r\nnew Promise(function (resolve, reject) {});\r\n```\r\n\r\n#### resolve(value)\r\nIf `value` is a promise or a thenable, the new promise will adopt its value once\r\nit settles.\r\n\r\n#### reject(reason)\r\nYour promise is rejected with `reason`. For consistency and debugging it is\r\nencouraged that `reason` is an instance of `Error`.\r\n\r\n### Instance methods\r\n\r\n#### promise.then(onFulfilled, onRejected)\r\n`onFulfilled` is called when/if \"promise\" resolves. `onRejected` is called\r\nwhen/if \"promise\" rejects. Both are optional, if either/both are omitted the\r\nnext `onFulfilled`/`onRejected` in the chain is called. Both callbacks have a\r\nsingle parameter, the fulfillment value or rejection reason. `then` returns a\r\nnew promise equivalent to the value you return from `onFulfilled`/`onRejected`\r\nafter being passed through `Promise.resolve`. If an error is thrown in the\r\ncallback, the returned promise rejects with that error.\r\n\r\n#### promise.catch(onRejected)\r\nSugar for `promise.then(undefined, onRejected)`.\r\n\r\n### Static methods\r\n\r\n#### Promise.resolve(value)\r\nAlways returns a promise. If `value` is a promise and its constructor is `Promise`\r\n`resolve` will return it without modifying it. Otherwise, `resolve` will return\r\na new promise that resolves to `value`.\r\n\r\n#### Promise.reject(reason)\r\nReturns a promise rejected with `reason`. Sugar for `new Promise(function (resolve, reject) { reject(value); })`.\r\n\r\n#### Promise.all(list)\r\nReturns a promise that fulfills when every item in the array fulfills, and\r\nrejects if (and when) any item rejects. Each array item is passed to\r\n`Promise.resolve`, so the array can be a mixture of promise-like objects and other\r\nobjects. The fulfillment value is an array (in order) of fulfillment values. The\r\nrejection value is the first rejection value.\r\n\r\n#### Promise.race(list)\r\nReturns a Promise that fulfills when any item fulfills, and rejects if any item\r\nrejects. Essentially, the first promise to be settled wins the race.\r\n\r\nLicense\r\n-------\r\nThis software is free to use under the Yahoo! Inc. BSD license.\r\nSee the [LICENSE file][] for license text and copyright information.\r\n\r\n[LICENSE file]: https://github.com/yahoo/ypromise/blob/master/LICENSE.md\r\n\r\nContribute\r\n----------\r\n\r\nSee the [CONTRIBUTING file][] for info.\r\n\r\n[CONTRIBUTING file]: https://github.com/yahoo/ypromise/blob/master/CONTRIBUTING.md\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/yahoo/ypromise",
  "_id": "ypromise@0.2.3",
  "_shasum": "59d9206010bc8d419a8ec68c25c91a4c12d7d89f",
  "_from": "ypromise@~0.2",
  "_resolved": "https://registry.npmjs.org/ypromise/-/ypromise-0.2.3.tgz"
}
