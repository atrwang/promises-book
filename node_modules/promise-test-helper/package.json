{
  "name": "promise-test-helper",
  "description": "promise test helper library.",
  "keywords": [
    "promise",
    "promises",
    "testing"
  ],
  "version": "0.0.4",
  "homepage": "https://github.com/azu/promise-test-helper/",
  "repository": {
    "url": "git://github.com/azu/promise-test-helper.git"
  },
  "main": "lib/promise-test-helper.js",
  "scripts": {
    "test": "mocha test/*.js"
  },
  "directories": {
    "test": "test/"
  },
  "author": {
    "name": "azu"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/azu/promise-test-helper/issues"
  },
  "devDependencies": {
    "mocha": "^1.18.2",
    "ypromise": "^0.2.3"
  },
  "readme": "# promise-test-helper [![Build Status](https://travis-ci.org/azu/promise-test-helper.svg)](https://travis-ci.org/azu/promise-test-helper)\n\n`promise-test-helper` is library for promise testing.\n\nThis library help you avoid promise traps on testing.\n\n* [Making Change.org — Promises and Error Handling](http://making.change.org/post/69613524472/promises-and-error-handling \"Making Change.org — Promises and Error Handling\")\n* [Promise Anti-patterns](http://taoofcode.net/promise-anti-patterns/ \"Promise Anti-patterns\")\n* [Promisesのテスト - Promises Book](http://azu.github.io/promises-book/#_chapter_3_promises \"Promises Book\") (japanese)\n\n### Trap case:\n\nYou expected to `mayBeRejected()` is rejected, but it is resolved.\n\nThe result is **always passed**.\n\n```js\nfunction mayBeRejected(){\n    return Promise.resolve();\n}\nit(\"is bad pattern\", function () {\n    return mayBeRejected().catch(function (error) {\n        assert(error instanceof Error);\n    });\n});\n```\n\nYou can write intended test with `promise-test-helper`.\n\nThe result is **Fail**.\n\n```js\nvar shouldRejected = require(\"promise-test-helper\").shouldRejected;\nfunction mayBeRejected(){\n    return Promise.resolve();\n}\nit(\"should be failed\", function () {\n    return shouldRejected(mayBeRejected()).catch(function (error) {\n        assert(error instanceof Error);\n    });\n});\n```\n\n## Installation\n\n``` sh\nnpm install --save-dev promise-test-helper\n```\n\nI'd recommend use with [Mocha](http://visionmedia.github.io/mocha/ \"Mocha\") or [Buster.JS](http://docs.busterjs.org/en/latest/ \"Buster.JS\") - support promise testing.\n\n\n## Usage\n\nThis library provide two methods.\n\n``` js\nvar shouldFulfilled = require(\"promise-test-helper\").shouldFulfilled;\nvar shouldRejected = require(\"promise-test-helper\").shouldRejected;\n// in test code\nshouldFulfilled(aPromise).then(function(){ /* assert */ });\nshouldRejected(aPromise).catch(function(){ /* assert */ });\n```\n\nExample :\n\n``` js\n\"use strict\";\nvar assert = require(\"assert\");\nvar Promise = require(\"ypromise\");\nvar shouldFulfilled = require(\"../lib/promise-test-helper\").shouldFulfilled;\nvar shouldRejected = require(\"../lib/promise-test-helper\").shouldRejected;\ndescribe(\"promise-test-helper\", function () {\n    beforeEach(function () {\n        this.fulfilledPromise = Promise.resolve(\"value\");\n        this.rejectedPromise = Promise.reject(new Error(\"error\"));\n    });\n    describe(\"Passing good test\", function () {\n        context(\"when promise is fulfilled\", function () {\n            it(\"should be passed\", function () {\n                return shouldFulfilled(this.fulfilledPromise).then(function (value) {\n                    assert(value === \"value\");\n                })\n            });\n        });\n        context(\"when promise is rejected\", function () {\n            it(\"should be passed\", function () {\n                return shouldRejected(this.rejectedPromise).catch(function (error) {\n                    assert(error instanceof Error);\n                });\n            });\n        });\n    });\n});\n```\n\nYou can avoid following wrong test by using these method :\n\n(following tests are failed.)\n\n```js\n// == Bad test pattern\ndescribe(\"Detect bad test pattern\", function () {\n    context(\"when argument is not promise\", function () {\n        it(\"should be failed\", function () {\n            return shouldFulfilled(\"string\");// is not a promise object\n        });\n    });\n    context(\"when promise is rejected\", function () {\n        it(\"should be failed\", function () {\n            return shouldFulfilled(this.rejectedPromise).catch(function (error) {\n                assert(error);// expect to fulfilled?\n            });\n        });\n    });\n    context(\"when argument is not promise\", function () {\n        it(\"should be failed\", function () {\n            return shouldRejected(\"string\");// is not a promise object\n        });\n    });\n    context(\"when promise is fulfilled\", function () {\n        it(\"should be failed\", function () {\n            return shouldRejected(this.fulfilledPromise).then(function (value) {\n                assert(value);// expect to rejected?\n            });\n        });\n    });\n});\n```\n\n\nThis library inspired by [domenic/chai-as-promised](https://github.com/domenic/chai-as-promised \"domenic/chai-as-promised\").\n\n## Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## License\n\nMIT",
  "readmeFilename": "readme.md",
  "_id": "promise-test-helper@0.0.4",
  "_shasum": "c2922e629d8d146734acf327459880fed0c35c52",
  "_from": "promise-test-helper@0.0.4",
  "_resolved": "https://registry.npmjs.org/promise-test-helper/-/promise-test-helper-0.0.4.tgz"
}
