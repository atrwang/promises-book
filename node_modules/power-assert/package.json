{
  "name": "power-assert",
  "description": "Power Assert in JavaScript",
  "version": "0.7.2",
  "keywords": [
    "power-assert",
    "test",
    "assert",
    "testing",
    "ecmascript",
    "ast"
  ],
  "homepage": "http://github.com/twada/power-assert",
  "author": {
    "name": "Takuto Wada",
    "email": "takuto.wada@gmail.com",
    "url": "http://github.com/twada"
  },
  "contributors": [
    {
      "name": "azu",
      "url": "https://github.com/azu"
    }
  ],
  "main": "./lib/power-assert",
  "directories": {
    "lib": "./lib"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/twada/power-assert.git"
  },
  "scripts": {
    "bower": "bower install --config.interactive=false",
    "test": "gulp test"
  },
  "dependencies": {
    "empower": "~0.7.1",
    "power-assert-formatter": "~0.7.1"
  },
  "devDependencies": {
    "browserify": "~4.1.3",
    "escodegen": "~1.3.2",
    "espower": "~0.7.0",
    "espower-loader": "~0.7.0",
    "esprima": "~1.2.1",
    "expect.js": "0.3.1",
    "gulp": "~3.6.2",
    "gulp-bump": "~0.1.8",
    "gulp-clean": "~0.2.4",
    "gulp-connect": "~2.0.5",
    "gulp-espower": "~0.7.0",
    "gulp-git": "~0.4.2",
    "gulp-mocha-phantomjs": "~0.2.0",
    "gulp-spawn-mocha": "~0.1.4",
    "lodash.merge": "~2.4.1",
    "optimist": "0.6.1",
    "qunit-tap": "1.4.2",
    "qunitjs": "1.14.0",
    "run-sequence": "~0.3.6",
    "vinyl-source-stream": "~0.1.1"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/twada/power-assert/master/MIT-LICENSE.txt"
    }
  ],
  "bugs": {
    "url": "http://github.com/twada/power-assert/issues"
  },
  "readme": "power-assert\n================================\n\n[![Build Status](https://travis-ci.org/twada/power-assert.svg)](https://travis-ci.org/twada/power-assert)\n[![NPM version](https://badge.fury.io/js/power-assert.svg)](http://badge.fury.io/js/power-assert)\n[![Dependency Status](https://gemnasium.com/twada/power-assert.svg)](https://gemnasium.com/twada/power-assert)\n\nPower Assert in JavaScript. Less code, more information.\n\n\nDESCRIPTION\n---------------------------------------\n\nWhat is `power-assert`?\n\n * is an implementation of \"Power Assert\" concept in JavaScript.\n * provides descriptive assertion messages through standard [assert](http://nodejs.org/api/assert.html) compatible interface.\n * works both on server side and browser side.\n * available via [npm](https://www.npmjs.org/) and [bower](http://bower.io/). \n * provides [browserify](http://browserify.org/) transform.\n * provides [grunt](http://gruntjs.com/) task and [gulp](http://gulpjs.com/) plugin.\n * supports source-map so you can debug as usual.\n * is a beta version product. Pull-requests, issue reports and patches are always welcomed.\n\n\n`power-assert` provides descriptive assertion messages for your tests, like this.\n\n      1) Array #indexOf() should return index when the value is present:\n         AssertionError: # /path/to/test/mocha_node.js:10\n    \n      assert(this.ary.indexOf(zero) === two)\n                  |   |       |     |   |\n                  |   |       |     |   2\n                  |   -1      0     false\n                  [1,2,3]\n    \n      [number] two\n      => 2\n      [number] this.ary.indexOf(zero)\n      => -1\n\n\nCHANGELOG\n---------------------------------------\n* Since version 0.7.2, power-assert provides all-in-one bundle for browsers. Therefore, you don't neeed to care about browser-side dependencies.\n* Since version 0.7.0, power-assert-formatter requires `esprima` and google's `diff_match_patch` as runtime dependency. Though npm and bower resolves this well, please be sure to check your dependencies if you are using power-assert under various browsers.\n* Since version 0.6.0, power-assert-formatter requires `estraverse` as runtime dependency. Though npm and bower resolves this well, please be sure to check your dependencies if you are using power-assert under various browsers.\n\n\nMODULES\n---------------------------------------\n\n`power-assert` family provides 9 modules. 5 core modules and 4 instrumentors.\n\ncore modules are,\n\n| module | description |\n|:-------|:------------|\n| [power-assert](http://github.com/twada/power-assert) | Standard `assert` function on top of `empower` and `power-assert-formatter` |\n| [empower](http://github.com/twada/empower) | Power Assert feature enhancer for assert function/object. |\n| [power-assert-formatter](http://github.com/twada/power-assert-formatter) | Power Assert output formatter. |\n| [espower](http://github.com/twada/espower) | Power Assert feature instrumentor core based on the [Mozilla JavaScript AST](https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API). |\n| [espower-source](http://github.com/twada/espower-source) | Power Assert instrumentor from source to source, with source-map. (Thin wrapper of `espower`). |\n\nand instrumentors are,\n\n| module | description |\n|:-------|:------------|\n| [espower-loader](http://github.com/twada/espower-loader) | Node module loader to apply `espower` on the fly. |\n| [espowerify](http://github.com/twada/espowerify) | [Browserify](http://browserify.org/) transform to apply `espower` to target files. |\n| [grunt-espower](http://github.com/twada/grunt-espower) | Grunt task to apply `espower` to target files. |\n| [gulp-espower](http://github.com/twada/gulp-espower) | Gulp plugin to apply `espower` to target files. |\n\n\n`power-assert` provides standard [assert](http://nodejs.org/api/assert.html) compatible function with Power Assert feature.\n(Best fit with [Mocha](http://visionmedia.github.io/mocha/). If you use assert-like objects provided by various testing frameworks such as [QUnit](http://qunitjs.com/) or [nodeunit](https://github.com/caolan/nodeunit). Please use [empower](http://github.com/twada/empower) and [power-assert-formatter](http://github.com/twada/power-assert-formatter) modules directly).\n\n\nInternally, `power-assert` uses [empower](http://github.com/twada/empower) module to enhance power assert feature into the standard [assert](http://nodejs.org/api/assert.html) module, to run with the power assert feature added code by [espower](http://github.com/twada/espower) module, and prettify output using [power-assert-formatter](http://github.com/twada/power-assert-formatter).\n\n\nSee [power-assert-demo](http://github.com/twada/power-assert-demo) project for power-assert Demo running with mocha.\n\n\nSEED PROJECTS\n---------------------------------------\n\nSome seed projects are available to help you start with power-assert.\n\n| module | env | tech stack |\n|:-------|:------------|:------------|\n| [power-assert-node-seed](https://github.com/azu/power-assert-node-seed) | Node.js | power-assert + [intelli-espower-loader](https://github.com/azu/intelli-espower-loader) |\n| [power-assert-testem-seed](https://github.com/azu/power-assert-testem-seed) | Browsers(by [testem](https://github.com/airportyh/testem)) | power-assert + [gulp-espower](http://github.com/twada/gulp-espower) + [testem](https://github.com/airportyh/testem). |\n| [power-assert-karma-seed](https://github.com/azu/power-assert-karma-seed) | Browsers(by [Karma](http://karma-runner.github.io/)) | power-assert + [espowerify](http://github.com/twada/espowerify) + [browserify](http://browserify.org/) + [Karma](http://karma-runner.github.io/). |\n\n\nEXAMPLE\n---------------------------------------\n\n### Target test code (using Mocha in this example)\n\n```javascript\nvar assert = require('power-assert');\n\ndescribe('Array', function(){\n    beforeEach(function(){\n        this.ary = [1,2,3];\n    });\n    describe('#indexOf()', function(){\n        it('should return index when the value is present', function(){\n            var zero = 0, two = 2;\n            assert(this.ary.indexOf(zero) === two);\n        });\n        it('should return -1 when the value is not present', function(){\n            var minusOne = -1, two = 2;\n            assert.ok(this.ary.indexOf(two) === minusOne, 'THIS IS AN ASSERTION MESSAGE');\n        });\n    });\n});\n\ndescribe('various types', function(){\n    function Person(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    beforeEach(function(){\n        this.types = [\n            'string', 98.6, true, false, null, undefined,\n            ['nested', 'array'],\n            {object: true},\n            NaN, Infinity,\n            /^not/,\n            new Person('alice', 3)\n        ];\n    });\n    it('demo', function(){\n        var index = this.types.length -1,\n            bob = new Person('bob', 5);\n        assert(this.types[index].name === bob.name);\n    });\n});\n```\n\n### Apply one of power assert instrumentors to code above then run tests. See the power-assert output appears.\n\n\n      $ mocha /path/to/espowered_examples/mocha_node.js\n    \n      Array\n        #indexOf()\n          1) should return index when the value is present\n          2) should return -1 when the value is not present\n      \n      various types\n        3) demo    \n    \n      0 passing (14 ms)\n      3 failing\n    \n      1) Array #indexOf() should return index when the value is present:\n         AssertionError: # /path/to/test/mocha_node.js:10\n      \n        assert(this.ary.indexOf(zero) === two)\n                    |   |       |     |   |\n                    |   |       |     |   2\n                    |   -1      0     false\n                    [1,2,3]\n        \n        [number] two\n        => 2\n        [number] this.ary.indexOf(zero)\n        => -1\n\n          at doPowerAssert (/path/to/node_modules/empower/lib/empower.js:116:39)\n          at /path/to/node_modules/empower/lib/empower.js:202:20\n          at powerAssert (/path/to/node_modules/empower/lib/empower.js:99:17)\n          at Context.<anonymous> (/path/to/test/mocha_node.js:13:13)\n      \n      \n      2) Array #indexOf() should return -1 when the value is not present:\n         AssertionError: THIS IS AN ASSERTION MESSAGE # /path/to/test/mocha_node.js:14\n    \n        assert.ok(this.ary.indexOf(two) === minusOne, 'THIS IS AN ASSERTION MESSAGE')\n                       |   |       |    |   |\n                       |   |       |    |   -1\n                       |   1       2    false\n                       [1,2,3]\n        \n        [number] minusOne\n        => -1\n        [number] this.ary.indexOf(two)\n        => 1\n      \n          at doPowerAssert (/path/to/node_modules/empower/lib/empower.js:116:39)\n          at Function.ok (/path/to/node_modules/empower/lib/empower.js:202:20)\n          at Context.<anonymous> (/path/to/test/mocha_node.js:21:20)\n      \n      \n      3) various types demo:\n         AssertionError: # /Users/takuto/work/git-sandbox/github/POWERASSERT/power-assert/sandbox/mocha_node.js:37\n    \n        assert(this.types[index].name === bob.name)\n                    |    ||      |    |   |   |\n                    |    ||      |    |   |   \"bob\"\n                    |    ||      |    |   Person{name:\"bob\",age:5}\n                    |    ||      |    false\n                    |    |11     \"alice\"\n                    |    Person{name:\"alice\",age:3}\n                    [\"string\",98.6,true,false,null,undefined,#Array#,#Object#,NaN,Infinity,/^not/,#Person#]\n        \n        --- [string] bob.name\n        +++ [string] this.types[index].name\n        @@ -1,3 +1,5 @@\n        -bob\n        +alice\n        \n        \n          at doPowerAssert (/path/to/node_modules/empower/lib/empower.js:116:39)\n          at /path/to/node_modules/empower/lib/empower.js:202:20\n          at powerAssert (/path/to/node_modules/empower/lib/empower.js:99:17)\n          at Context.<anonymous> (/path/to/test/mocha_node.js:55:9)\n\n\nHOW TO USE\n---------------------------------------\n\nThere are three ways to use power-assert. (If you want to see running examples, see [SEED PROJECTS](#seed-projects))\n\n1. `power-assert` + `espower-loader`: Highly recommended but only works under Node.\n2. `power-assert` + `espowerify` : Recommended if you are using [browserify](http://browserify.org/).\n3. `power-assert` + `grunt-espower` or `gulp-espower` : Generate instrumented code so works anywhere.\n\n\n### using `espower-loader`\n\nIf you are writing Node.js app/module, you can instrument Power Assert feature without code generation by using `espower-loader`.\n\nFirst, install `power-assert` and `espower-loader` via npm.\n\n    $ npm install --save-dev power-assert espower-loader\n\nSecond, require `power-assert` in your test.\n\n    --- a/test/your_test.js\n    +++ b/test/your_test.js\n    @@ -1,4 +1,4 @@\n    -var assert = require('assert');\n    +var assert = require('power-assert');\n\n\nThird, put `enable-power-assert.js` somewhere in your project, where `pattern` matches to target test files.\n\n```javascript\nrequire('espower-loader')({\n    // directory where match starts with\n    cwd: process.cwd(),\n    // glob pattern using minimatch module\n    pattern: 'test/**/*.js'\n});\n```\n\nThen run mocha, with `--require` option. No code generation required.\n\n    $ mocha --require ./path/to/enable-power-assert test/your_test.js\n\n\nFYI: You may be interested in [intelli-espower-loader](https://github.com/azu/intelli-espower-loader) to go one step further. With [intelli-espower-loader](https://github.com/azu/intelli-espower-loader), you don't need to create loader file (like `enable-power-assert.js`). Just define test directory in `package.json` wow!\n\n\n\n### using `espowerify`\n\nOn the browser side and you are using [browserify](http://browserify.org/), you can instrument Power Assert feature via `espowerify`.\n\nFirst, install `power-assert` and `espowerify` via npm.\n\n    $ npm install --save-dev power-assert espowerify\n\nSecond, require `power-assert` in your test.\n\n    --- a/test/your_test.js\n    +++ b/test/your_test.js\n    @@ -1,4 +1,4 @@\n    -var assert = require('assert');\n    +var assert = require('power-assert');\n\nThird, apply `espowerify` through browserify transform.\n\n    $ browserify -t espowerify test/your_test.js > dist/your_test.js\n\nLastly, run your test in your way. For example,\n\n    $ mocha-phantomjs path/to/test.html\n\n\n\n### using `grunt-espower`\n\nOn the browser side and you are not using [browserify](http://browserify.org/) but [bower](http://bower.io/) and [Grunt](http://gruntjs.com/), you can use `power-assert` via bower, with generated code by `grunt-espower`\n(If you prefer more small steps, [espower runner](https://gist.github.com/azu/6309397) and [its variation for Windows](https://gist.github.com/gooocho/6317135) may be useful to start with.)\n\nFirst, install `power-assert` via bower and `grunt-espower` via npm. This means that you run grunt (on Node), then run tests on browser.\n\n    $ bower install --save-dev power-assert\n    $ npm install --save-dev grunt-espower\n\nSecond, require `power-assert` in your test html.\n\n    <script type=\"text/javascript\" src=\"./path/to/bower_components/power-assert/build/power-assert.js\"></script>\n\nThird, configure `grunt-espower` task to  generate espowered code.\n\n```javascript\ngrunt.initConfig({\n\n  . . . \n\n  espower: {\n    test: {\n      files: [\n        {\n          expand: true,        // Enable dynamic expansion.\n          cwd: 'test/',        // Src matches are relative to this path.\n          src: ['**/*.js'],    // Actual pattern(s) to match.\n          dest: 'espowered/',  // Destination path prefix.\n          ext: '.js'           // Dest filepaths will have this extension.\n        }\n      ]\n    },\n  },\n\n  . . . \n\n})\n```\n\nThen, generate espowered code using `espower` task.\n\n    $ grunt espower:test\n\nLastly, run your test in your way. For example,\n\n    $ grunt test\n\nor\n\n    $ mocha your_test_espowered.js\n\n\n\n### using `gulp-espower`\n\nOn the browser side and you are not using [browserify](http://browserify.org/) but [bower](http://bower.io/) and [gulp](http://gulpjs.com/), you can use `power-assert` via bower, with generated code by `gulp-espower`\n(If you prefer more small steps, [espower runner](https://gist.github.com/azu/6309397) and [its variation for Windows](https://gist.github.com/gooocho/6317135) may be useful to start with.)\n\nFirst, install `power-assert` via bower and `gulp-espower` via npm. This means that you run gulp (on Node), then run tests on browser.\n\n    $ bower install --save-dev power-assert\n    $ npm install --save-dev gulp-espower\n\nSecond, require `power-assert` in your test html.\n\n    <script type=\"text/javascript\" src=\"./path/to/bower_components/power-assert/build/power-assert.js\"></script>\n\nThird, configure `gulp-espower` task to generate espowered code.\n\n```javascript\nvar gulp = require('gulp'),\n    espower = require('gulp-espower');\n  . . . \ngulp.task('espower', function() {\n    return gulp\n        .src('test/**/*_test.js')\n        .pipe(espower())\n        .pipe(gulp.dest('espowered'));\n});\n  . . . \n})\n```\n\nThen, generate espowered code using `espower` task.\n\n    $ gulp espower\n\nLastly, run your test in your way. For example,\n\n    $ gulp test\n\nor\n\n    $ mocha your_test_espowered.js\n\n\n\nTESTED FRAMEWORKS\n---------------------------------------\n* [Mocha](http://visionmedia.github.io/mocha/)\n* [QUnit](http://qunitjs.com/)\n* [nodeunit](https://github.com/caolan/nodeunit)\n* [buster-assertions](http://docs.busterjs.org/en/latest/modules/buster-assertions/)\n\n\nTESTED ENVIRONMENTS\n---------------------------------------\n* [Node.js](http://nodejs.org/)\n* [Rhino](https://developer.mozilla.org/en/Rhino)\n* [PhantomJS](http://phantomjs.org/)\n* [RequireJS](http://requirejs.org/)\n* [Browserify](http://browserify.org/)\n\n\nAUTHOR\n---------------------------------------\n* [Takuto Wada](http://github.com/twada)\n\n\nCONTRIBUTORS\n---------------------------------------\n* [azu](https://github.com/azu)\n\n\nLICENSE\n---------------------------------------\nLicensed under the [MIT](https://raw.github.com/twada/power-assert/master/MIT-LICENSE.txt) license.\n\n\n\nMORE OUTPUT EXAMPLES\n---------------------------------------\n\n### Target test code (using QUnit in this example)\n\n```javascript\nvar q = require('qunitjs');\n\n(function () {\n    var empower = require('empower'),\n        formatter = require('power-assert-formatter'),\n        qunitTap = require(\"qunit-tap\");\n    empower(q.assert, formatter(), {destructive: true});\n    qunitTap(q, require('util').puts, {showSourceOnFailure: false});\n    q.config.autorun = false;\n})();\n\nq.test('spike', function (assert) {\n    assert.ok(true);\n\n    var hoge = 'foo';\n    var fuga = 'bar';\n    assert.ok(hoge === fuga, 'comment');\n\n    var piyo = 3;\n    assert.ok(fuga === piyo);\n\n    var longString = 'very very loooooooooooooooooooooooooooooooooooooooooooooooooooong message';\n    var anotherLongString = 'yet another loooooooooooooooooooooooooooooooooooooooooooooooooooong message';\n    assert.ok(longString === anotherLongString);\n\n    assert.ok(4 === piyo);\n\n    assert.ok(4 !== 4);\n\n    var falsyStr = '';\n    assert.ok(falsyStr);\n\n    var falsyNum = 0;\n    assert.ok(falsyNum);\n\n    var ary1 = ['foo', 'bar'];\n    var ary2 = ['aaa', 'bbb', 'ccc'];\n    assert.ok(ary1.length === ary2.length);\n    assert.deepEqual(ary1, ary2);\n\n    var actual = 16;\n    assert.ok(5 < actual && actual < 13);\n\n    actual = 4;\n    assert.ok(5 < actual && actual < 13);\n\n    actual = 10;\n    assert.ok(actual < 5 || 13 < actual);\n\n\n    var propName = 'bar',\n        foo = {\n            bar: {\n                baz: false\n            }\n        };\n\n    assert.ok(foo.bar.baz);\n    assert.ok(foo['bar'].baz);\n    assert.ok(foo[propName]['baz']);\n\n\n    var truth = true;\n    assert.ok(!truth);\n\n\n    var func = function () { return false; };\n    assert.ok(func());\n\n\n    var obj = {\n        age: function () {\n            return 0;\n        }\n    };\n    assert.ok(obj.age());\n\n\n    var isFalsy = function (arg) {\n        return !(arg);\n    };\n    var positiveInt = 50;\n    assert.ok(isFalsy(positiveInt));\n\n\n    var sum = function () {\n        var result = 0;\n        for (var i = 0; i < arguments.length; i += 1) {\n            result += arguments[i];\n        }\n        return result;\n    };\n    var one = 1, two = 2, three = 3, seven = 7, ten = 10;\n    assert.ok(sum(one, two, three) === seven);\n    assert.ok(sum(sum(one, two), three) === sum(sum(two, three), seven));\n    assert.ok((three * (seven * ten)) === three);\n\n\n    var math = {\n        calc: {\n            sum: function () {\n                var result = 0;\n                for (var i = 0; i < arguments.length; i += 1) {\n                    result += arguments[i];\n                }\n                return result;\n            }\n        }\n    };\n    assert.ok(math.calc.sum(one, two, three) === seven);\n});\n\nq.load();\n```\n\n\n### `espower` code above then running under Node.js\n    \n```\n# module: undefined\n# test: spike\nok 1 - okay\nnot ok 2 - comment # /path/to/examples/qunit_node.js:17\n#\n# assert.ok(hoge === fuga, 'comment')\n#           |    |   |\n#           |    |   \"bar\"\n#           |    false\n#           \"foo\"\n#\n# --- [string] fuga\n# +++ [string] hoge\n# @@ -1,3 +1,3 @@\n# -bar\n# +foo\n#\n# , test: spike\nnot ok 3 - # /path/to/examples/qunit_node.js:20\n#\n# assert.ok(fuga === piyo)\n#           |    |   |\n#           |    |   3\n#           |    false\n#           \"bar\"\n#\n# [number] piyo\n# => 3\n# [string] fuga\n# => \"bar\"\n\n# , test: spike\nnot ok 4 - # /path/to/examples/qunit_node.js:24\n#\n# assert.ok(longString === anotherLongString)\n#           |          |   |\n#           |          |   \"yet another loooooooooooooooooooooooooooooooooooooooooooooooooooong message\"\n#           |          false\n#           \"very very loooooooooooooooooooooooooooooooooooooooooooooooooooong message\"\n#\n# --- [string] anotherLongString\n# +++ [string] longString\n# @@ -1,15 +1,13 @@\n# -yet anoth\n# +very v\n#  er\n# +y\n#   loo\n#\n# , test: spike\nnot ok 5 - # /path/to/examples/qunit_node.js:26\n#\n# assert.ok(4 === piyo)\n#             |   |\n#             |   3\n#             false\n#\n# [number] piyo\n# => 3\n# [number] 4\n# => 4\n# , test: spike\nnot ok 6 - # /path/to/examples/qunit_node.js:28\n#\n# assert.ok(4 !== 4)\n#             |\n#             false\n# , test: spike\nnot ok 7 - # /path/to/examples/qunit_node.js:31\n#\n# assert.ok(falsyStr)\n#           |\n#           \"\"\n# , test: spike\nnot ok 8 - # /path/to/examples/qunit_node.js:34\n#\n# assert.ok(falsyNum)\n#           |\n#           0\n# , test: spike\nnot ok 9 - # /path/to/examples/qunit_node.js:38\n#\n# assert.ok(ary1.length === ary2.length)\n#           |    |      |   |    |\n#           |    |      |   |    3\n#           |    |      |   [\"aaa\",\"bbb\",\"ccc\"]\n#           |    2      false\n#           [\"foo\",\"bar\"]\n#\n# [number] ary2.length\n# => 3\n# [number] ary1.length\n# => 2\n# , test: spike\nnot ok 10 - # /path/to/examples/qunit_node.js:39\n#\n# assert.deepEqual(ary1, ary2)\n#                  |     |\n#                  |     [\"aaa\",\"bbb\",\"ccc\"]\n#                  [\"foo\",\"bar\"]\n# , expected: [\n#   \"aaa\",\n#   \"bbb\",\n#   \"ccc\"\n# ], got: [\n#   \"foo\",\n#   \"bar\"\n# ], test: spike\nnot ok 11 - # /path/to/examples/qunit_node.js:42\n#\n# assert.ok(5 < actual && actual < 13)\n#             | |      |  |      |\n#             | |      |  16     false\n#             | 16     false\n#             true\n# , test: spike\nnot ok 12 - # /path/to/examples/qunit_node.js:45\n#\n# assert.ok(5 < actual && actual < 13)\n#             | |      |\n#             | 4      false\n#             false\n# , test: spike\nnot ok 13 - # /path/to/examples/qunit_node.js:48\n#\n# assert.ok(actual < 5 || 13 < actual)\n#           |      |   |     | |\n#           |      |   |     | 10\n#           |      |   false false\n#           10     false\n# , test: spike\nnot ok 14 - # /path/to/examples/qunit_node.js:58\n#\n# assert.ok(foo.bar.baz)\n#           |   |   |\n#           |   |   false\n#           |   Object{baz:false}\n#           Object{bar:#Object#}\n# , test: spike\nnot ok 15 - # /path/to/examples/qunit_node.js:59\n#\n# assert.ok(foo['bar'].baz)\n#           |  |       |\n#           |  |       false\n#           |  Object{baz:false}\n#           Object{bar:#Object#}\n# , test: spike\nnot ok 16 - # /path/to/examples/qunit_node.js:60\n#\n# assert.ok(foo[propName]['baz'])\n#           |  ||        |\n#           |  |\"bar\"    false\n#           |  Object{baz:false}\n#           Object{bar:#Object#}\n# , test: spike\nnot ok 17 - # /path/to/examples/qunit_node.js:64\n#\n# assert.ok(!truth)\n#           ||\n#           |true\n#           false\n# , test: spike\nnot ok 18 - # /path/to/examples/qunit_node.js:68\n#\n# assert.ok(func())\n#           |\n#           false\n# , test: spike\nnot ok 19 - # /path/to/examples/qunit_node.js:76\n#\n# assert.ok(obj.age())\n#           |   |\n#           |   0\n#           Object{age:#function#}\n# , test: spike\nnot ok 20 - # /path/to/examples/qunit_node.js:83\n#\n# assert.ok(isFalsy(positiveInt))\n#           |       |\n#           false   50\n# , test: spike\nnot ok 21 - # /path/to/examples/qunit_node.js:94\n#\n# assert.ok(sum(one, two, three) === seven)\n#           |   |    |    |      |   |\n#           |   |    |    |      |   7\n#           6   1    2    3      false\n#\n# [number] seven\n# => 7\n# [number] sum(one, two, three)\n# => 6\n# , test: spike\nnot ok 22 - # /path/to/examples/qunit_node.js:95\n#\n# assert.ok(sum(sum(one, two), three) === sum(sum(two, three), seven))\n#           |   |   |    |     |      |   |   |   |    |       |\n#           |   |   |    |     |      |   12  5   2    3       7\n#           6   3   1    2     3      false\n#\n# [number] sum(sum(two, three), seven)\n# => 12\n# [number] sum(sum(one, two), three)\n# => 6\n# , test: spike\nnot ok 23 - # /path/to/examples/qunit_node.js:96\n#\n# assert.ok(three * (seven * ten) === three)\n#           |     |  |     | |    |   |\n#           |     |  |     | |    |   3\n#           |     |  |     | 10   false\n#           |     |  7     70\n#           3     210\n#\n# [number] three\n# => 3\n# [number] three * (seven * ten)\n# => 210\n# , test: spike\nnot ok 24 - # /path/to/examples/qunit_node.js:110\n#\n# assert.ok(math.calc.sum(one, two, three) === seven)\n#           |    |    |   |    |    |      |   |\n#           |    |    |   |    |    |      |   7\n#           |    |    6   1    2    3      false\n#           |    Object{sum:#function#}\n#           Object{calc:#Object#}\n#\n# [number] seven\n# => 7\n# [number] math.calc.sum(one, two, three)\n# => 6\n# , test: spike\n1..24\n```\n\nHave fun!\n",
  "readmeFilename": "README.md",
  "_id": "power-assert@0.7.2",
  "_shasum": "b89afa3e9fa5eb3a6e4b1e9f287639208135fc23",
  "_from": "power-assert@^0.7.2",
  "_resolved": "https://registry.npmjs.org/power-assert/-/power-assert-0.7.2.tgz"
}
